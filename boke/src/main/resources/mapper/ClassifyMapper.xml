<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="boke.boke.mapper.ClassifyMapper" >
  <resultMap id="BaseResultMap" type="boke.boke.entity.Classify" >
    <id column="Classify_id" property="classifyId" jdbcType="INTEGER" />
    <result column="Classify_Name" property="classifyName" jdbcType="VARCHAR" />
    <result column="Classify_Category" property="classifyCategory" jdbcType="VARCHAR" />
    <result column="Superclass_id" property="superclassId" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    Classify_id, Classify_Name, Classify_Category, Superclass_id
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="boke.boke.entity.ClassifyExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from classify
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from classify
    where Classify_id = #{classifyId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from classify
    where Classify_id = #{classifyId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="boke.boke.entity.ClassifyExample" >
    delete from classify
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="boke.boke.entity.Classify" >
    insert into classify (Classify_id, Classify_Name, Classify_Category, 
      Superclass_id)
    values (#{classifyId,jdbcType=INTEGER}, #{classifyName,jdbcType=VARCHAR}, #{classifyCategory,jdbcType=VARCHAR}, 
      #{superclassId,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="boke.boke.entity.Classify" >
    insert into classify
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="classifyId != null" >
        Classify_id,
      </if>
      <if test="classifyName != null" >
        Classify_Name,
      </if>
      <if test="classifyCategory != null" >
        Classify_Category,
      </if>
      <if test="superclassId != null" >
        Superclass_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="classifyId != null" >
        #{classifyId,jdbcType=INTEGER},
      </if>
      <if test="classifyName != null" >
        #{classifyName,jdbcType=VARCHAR},
      </if>
      <if test="classifyCategory != null" >
        #{classifyCategory,jdbcType=VARCHAR},
      </if>
      <if test="superclassId != null" >
        #{superclassId,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="boke.boke.entity.ClassifyExample" resultType="java.lang.Integer" >
    select count(*) from classify
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update classify
    <set >
      <if test="record.classifyId != null" >
        Classify_id = #{record.classifyId,jdbcType=INTEGER},
      </if>
      <if test="record.classifyName != null" >
        Classify_Name = #{record.classifyName,jdbcType=VARCHAR},
      </if>
      <if test="record.classifyCategory != null" >
        Classify_Category = #{record.classifyCategory,jdbcType=VARCHAR},
      </if>
      <if test="record.superclassId != null" >
        Superclass_id = #{record.superclassId,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update classify
    set Classify_id = #{record.classifyId,jdbcType=INTEGER},
      Classify_Name = #{record.classifyName,jdbcType=VARCHAR},
      Classify_Category = #{record.classifyCategory,jdbcType=VARCHAR},
      Superclass_id = #{record.superclassId,jdbcType=INTEGER}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="boke.boke.entity.Classify" >
    update classify
    <set >
      <if test="classifyName != null" >
        Classify_Name = #{classifyName,jdbcType=VARCHAR},
      </if>
      <if test="classifyCategory != null" >
        Classify_Category = #{classifyCategory,jdbcType=VARCHAR},
      </if>
      <if test="superclassId != null" >
        Superclass_id = #{superclassId,jdbcType=INTEGER},
      </if>
    </set>
    where Classify_id = #{classifyId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="boke.boke.entity.Classify" >
    update classify
    set Classify_Name = #{classifyName,jdbcType=VARCHAR},
      Classify_Category = #{classifyCategory,jdbcType=VARCHAR},
      Superclass_id = #{superclassId,jdbcType=INTEGER}
    where Classify_id = #{classifyId,jdbcType=INTEGER}
  </update>

  <!--查询状态为零的技术栏-->
  <select id="selectByPrimarydatakey" resultMap="BaseResultMap">
    select
    *
    from classify
    where Superclass_id=0
  </select>
  <!--查询当前文章的标签id-->
  <select id="selectByByPrimaryClassname" resultMap="BaseResultMap">
    select *
    from classify
    where Classify_id = (select Classify_id from blogandclassify WHERE BlogsArticle_Id = #{blogsarticleId,jdbcType=INTEGER});
  </select>
<!--根据当前文章名称查询标签id-->
  <select id="selectByByClassname" resultMap="BaseResultMap">
    select *
    from classify
    where Classify_Name =#{classname,jdbcType=VARCHAR}
  </select>

</mapper>